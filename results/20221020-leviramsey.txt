CPU: Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz
Git SHA: 5a55280de8d209e0414c061204115d5c8ddb1564

sbt (root) > Jmh / run -i 100 -wi 2 -f1 -t1 -r1 -bm avgt -tu us
[info] # JMH version: 1.32
[info] # VM version: JDK 11.0.16, OpenJDK 64-Bit Server VM, 11.0.16+8-jvmci-22.2-b06
[info] # VM invoker: /home/levi/.sdkman/candidates/java/22.2.r11-grl/bin/java
[info] # VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 2 iterations, 10 s each
[info] # Measurement: 100 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op

[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                       Mode  Cnt    Score   Error  Units
[info] BehaviorBenchmark.benchmarkAbstractBehavior000  avgt  100   23.858 ± 0.502  us/op
[info] BehaviorBenchmark.benchmarkAbstractBehavior001  avgt  100   29.025 ± 0.595  us/op
[info] BehaviorBenchmark.benchmarkAbstractBehavior002  avgt  100   33.743 ± 0.574  us/op
[info] BehaviorBenchmark.benchmarkAbstractBehavior004  avgt  100   41.282 ± 0.961  us/op
[info] BehaviorBenchmark.benchmarkAbstractBehavior008  avgt  100   54.902 ± 0.922  us/op
[info] BehaviorBenchmark.benchmarkAbstractBehavior016  avgt  100   78.765 ± 1.289  us/op
[info] BehaviorBenchmark.benchmarkAbstractBehavior032  avgt  100  125.803 ± 3.289  us/op
[info] BehaviorBenchmark.benchmarkAbstractBehavior064  avgt  100  221.542 ± 5.795  us/op
[info] BehaviorBenchmark.benchmarkAbstractBehavior128  avgt  100  380.379 ± 9.985  us/op
[info] BehaviorBenchmark.benchmarkOnMessage000         avgt  100   23.965 ± 0.671  us/op
[info] BehaviorBenchmark.benchmarkOnMessage001         avgt  100   27.991 ± 0.728  us/op
[info] BehaviorBenchmark.benchmarkOnMessage002         avgt  100   33.406 ± 0.993  us/op
[info] BehaviorBenchmark.benchmarkOnMessage004         avgt  100   39.165 ± 0.904  us/op
[info] BehaviorBenchmark.benchmarkOnMessage008         avgt  100   51.370 ± 1.006  us/op
[info] BehaviorBenchmark.benchmarkOnMessage016         avgt  100   76.193 ± 1.758  us/op
[info] BehaviorBenchmark.benchmarkOnMessage032         avgt  100  124.346 ± 3.810  us/op
[info] BehaviorBenchmark.benchmarkOnMessage064         avgt  100  204.596 ± 5.209  us/op
[info] BehaviorBenchmark.benchmarkOnMessage128         avgt  100  365.066 ± 8.368  us/op

Test description:

000: spawns actor, runs empty stream, stops actor
001: spawns actor, runs stream with one command, stops actor
etc.

Absolute numbers not really relevant, but deltas are

Analysis
                  0->1   1->2   2->4   4->8    8->16   16->32  32->64  64->128
AbstractBehavior  5.17us 4.71us 7.54us 13.62us 23.87us 47.03us 95.74us 158.84us
OnMessageBehavior 4.03us 5.42us 5.77us 12.20us 24.82us 48.15us 80.25us 160.47us

OnMessageBehavior upper 99.9 confidence bound relative to AbstractBehavior mean and confidence bound

Formula (ombmean + omberr - abmean) / aberr

Lower values (incl. more negative) are more favorable for OnMessageBehavior

000:  +1.54
001:  -0.51
002:  +1.14
004:  -1.26
008:  -2.74
016:  -0.63
032:  +0.72
064:  -2.03
128:  -0.70
